//8. Графы
// 2.* Реализуйте направленный граф, представленный матрицей смежности, и добавьте метод проверки, будет ли он циклическим.
// Ссылка на код:https://github.com/Pseudo-math/DSA2.1/blob/master/src/SimpleDirectGraph.java
//Временная сложность метода HasCycle() — O(n²) из-за обхода матрицы смежности. Памяти требуется O(n) для хранения состояния вершин и стека вызовов.

//10. Поиск пути в графе (обход в глубину)

// 1. Проверка связности неориентированного графа.
// Ссылка на код: https://github.com/Pseudo-math/DSA2.1/blob/master/src/SimpleGraph.java#L172
// Временная сложность метода IsConnected() — O(V^2) из-за DFS с матрицей смежности. Памяти требуется O(V) для стека и состояния вершин.

// 2. Самый длинный путь в ориентированном графе с циклами.
// Ссылка на код: https://github.com/Pseudo-math/DSA2.1/blob/master/src/SimpleDirectGraph.java#L99
// Временная сложность метода `findLongestPath()` — O(V * 2^V) из-за экспоненциального перебора путей. Памяти требуется O(V) для хранения пути и состояния вершин.

//11. Поиск пути в графе (обход в ширину)

// 2. Два наиболее удалённых узла в дереве.
// Ссылка на код: https://github.com/Pseudo-math/DSA2.1/blob/master/src/SimpleGraph.java#L240
// Временная сложность метода `findFarthestNodes()` — O(V^2) из-за двух BFS с матрицей смежности. Памяти требуется O(V) для очереди и массива расстояний.

// 3. Найти все циклы в неориентированном графе с использованием BFS.
// Ссылка на код: https://github.com/Pseudo-math/DSA2.1/blob/master/src/SimpleDirectGraph.java#L133
// Временная сложность метода findAllCycles() — O(V^3) из-за BFS с матрицей смежности для каждой стартовой вершины. Памяти требуется O(V + C * V), где C — число циклов, для хранения состояния вершин и списка циклов.

//12. Графы с треугольниками

// 1. Подсчёт числа треугольников в графе.
// Ссылка на код: https://github.com/Pseudo-math/DSA2.1/blob/master/src/SimpleGraph.java#L289
// Временная сложность метода `countTriangles()` — O(V^3) из-за перебора всех троек вершин. Памяти требуется O(T) (T ≤ V^3/6) для хранения треугольников.

// 2. Поиск узлов, не входящих ни в один треугольник в графе.
// Ссылка на код: https://github.com/Pseudo-math/DSA2.1/blob/master/src/SimpleGraph.java#L314
// Временная сложность метода `findNonTriangleVertices()` — O(V^3) из-за перебора троек вершин. Памяти требуется O(V) для хранения вершин и результата.