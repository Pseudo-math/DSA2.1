// 7. Пирамиды

// 4.* Добавьте метод поиска максимального элемента в заданном диапазоне значений.
// Ссылка на код: https://github.com/Pseudo-math/DSA2.1/blob/master/src/Heap.java#L68
// Метод FindMaxInRange имеет временную и пространственную сложность O(n),
// так как в худшем случае требуется проверить все элементы кучи — обход осуществляется в ширину,
// но условия ограничивают добавление в очередь.

// 5.* Подумайте над эффективным алгоритмом поиска в куче элемента по заданному условию (например, меньше заданного значения).
// Учитывайте, что классический поиск "вслепую" неэффективен; используйте свойства кучи для оптимизации.
// Ссылка на код: https://github.com/Pseudo-math/DSA2.1/blob/master/src/Heap.java#L88
// Метод FindElementsLessThan использует свойства пирамиды и выполняет обратный обход от листьев к корню.
// В худшем случае сложность составляет O(n) по времени и пространству, так как возможен просмотр всех элементов.

// 6.* Добавьте метод объединения текущей кучи с кучей-параметром. Используйте для этого только внешний интерфейс класса
// (без доступа/преобразования в массив и обратно). Подумайте, как сделать это добавлением всего одного дополнительного метода в интерфейс.
// Ссылка на код: https://github.com/Pseudo-math/DSA2.1/blob/master/src/Heap.java#L129
// Метод MergeHeap вставляет каждый элемент из другой кучи с помощью метода Add,
// что приводит к общей временной сложности O(m * log(n + m)), где m — количество элементов в другой куче,
// а n — количество элементов в текущей. Пространственная сложность — O(1), без учета расширения кучи.
